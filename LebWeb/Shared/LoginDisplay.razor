@using Microsoft.AspNetCore.Identity
@inject NavigationManager _navManager
@inject UserManager<ApplicationUser> _userManager


<AuthorizeView>
    <Authorized>
        <div class="nav-item">
            <NavLink class="nav-link" href="/profile" style="color: whitesmoke">
                @UserName
                @*Hello, @context.User.Identity?.Name!*@
            </NavLink>
        </div>
        <div class="nav-item">
            <NavLink class="nav-link" href="/logout" style="color: whitesmoke">
                <span class="oi oi-account-logout" aria-hidden="true"></span> Log Out
            </NavLink>
        </div>
        @*<a href="Identity/Account/Manage">Hello, @context.User.Identity?.Name!</a>*@
        @* <form method="post" action="Identity/Account/LogOut">
            <button type="submit" class="nav-link btn btn-link">Log out</button>
            </form>*@
    </Authorized>
    <NotAuthorized>
        <div class="nav-item">
            <NavLink class="nav-link" href="/register" style="color: whitesmoke">
                <span class="oi oi-list" aria-hidden="true"></span> Register
            </NavLink>
        </div>
        @*<a href="Identity/Account/Register">Register</a>*@

        <div class="nav-item">
            <NavLink class="nav-link" href="/login" style="color: whitesmoke">
                <span class="oi oi-account-login" aria-hidden="true"></span> Log In
            </NavLink>
        </div>
        @*<a href="Identity/Account/Login">Log in</a>*@
    </NotAuthorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string? UserName { get; set; }
    private bool isLoggedIn = false;
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1500);
        var authState = await authenticationStateTask;
            var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            isLoggedIn = true;
            var currentUser = await _userManager.FindByNameAsync(user.Identity.Name);
            //UserName = $"{CultureInfo.CurrentCulture.TextInfo.ToTitleCase(currentUser.FirstName.ToLower())} " +
            //            $"{CultureInfo.CurrentCulture.TextInfo.ToTitleCase(currentUser.LastName.ToLower())}";
            //            //$"{ username.LastName.Substring(0,1).ToUpper() }";
            UserName = $"Hello, {StringUtilities.CustomToUpper(currentUser.FirstName)}" +
                        $" {StringUtilities.CustomToUpper(currentUser.LastName)}";
        }
    }
}
